// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipe.proto

package pipe

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1979e1a5fdc07ed, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Record) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Record) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Record) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func init() {
	proto.RegisterType((*Record)(nil), "pipe.Record")
}

func init() { proto.RegisterFile("pipe.proto", fileDescriptor_d1979e1a5fdc07ed) }

var fileDescriptor_d1979e1a5fdc07ed = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8e, 0x3f, 0xcb, 0xc2, 0x30,
	0x10, 0x87, 0xdf, 0xfe, 0x79, 0x8b, 0x1e, 0xa2, 0x10, 0x44, 0x42, 0x5d, 0x4a, 0xa7, 0x4e, 0x29,
	0xe8, 0xe4, 0xe8, 0xd0, 0x2f, 0x50, 0x14, 0x5c, 0x53, 0x73, 0xad, 0x81, 0xb6, 0x09, 0xb1, 0x0e,
	0x7e, 0x7b, 0xe9, 0x45, 0xb7, 0xdf, 0xf3, 0x70, 0x70, 0x0f, 0x80, 0xd5, 0x16, 0x85, 0x75, 0x66,
	0x32, 0x2c, 0x9e, 0x77, 0xba, 0xef, 0x8c, 0xe9, 0x7a, 0x2c, 0xc9, 0x35, 0xaf, 0xb6, 0xc4, 0xc1,
	0x4e, 0x6f, 0x7f, 0x92, 0xdf, 0x20, 0xa9, 0xf1, 0x6e, 0x9c, 0x62, 0x6b, 0x08, 0xb5, 0xe2, 0x41,
	0x16, 0x14, 0x51, 0x1d, 0x6a, 0xc5, 0x18, 0xc4, 0xa3, 0x1c, 0x90, 0x87, 0x59, 0x50, 0x2c, 0x6b,
	0xda, 0x6c, 0x0b, 0xff, 0x38, 0x48, 0xdd, 0xf3, 0x88, 0xa4, 0x87, 0xd9, 0xda, 0x87, 0x19, 0x91,
	0xc7, 0xde, 0x12, 0x1c, 0x2a, 0x58, 0x5c, 0x9c, 0x1c, 0x9f, 0x2d, 0x3a, 0x76, 0x82, 0xcd, 0x59,
	0xa9, 0xab, 0x55, 0x72, 0xc2, 0xef, 0xbb, 0x95, 0xa0, 0x50, 0x4f, 0xe9, 0x4e, 0xf8, 0x48, 0xf1,
	0x8b, 0x14, 0xd5, 0x1c, 0x99, 0xff, 0x35, 0x09, 0x99, 0xe3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0x71, 0xdc, 0xf2, 0xd8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferClient interface {
	AddUpdateRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*empty.Empty, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) AddUpdateRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pipe.Transfer/AddUpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
type TransferServer interface {
	AddUpdateRecord(context.Context, *Record) (*empty.Empty, error)
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_AddUpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).AddUpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipe.Transfer/AddUpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).AddUpdateRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipe.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUpdateRecord",
			Handler:    _Transfer_AddUpdateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipe.proto",
}
